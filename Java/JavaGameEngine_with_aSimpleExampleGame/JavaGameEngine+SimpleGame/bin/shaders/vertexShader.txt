#version 400 core

in vec3 pos;
in vec2 textureCoords;
in vec3 normals;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPos[4];
uniform float useFakeLighting;
uniform float density;
uniform float gradient;

uniform float numberOfRows;
uniform vec2 offset;

uniform vec4 plane;

void main(void) {

	vec4 worldPosition = transformationMatrix * vec4(pos, 1.0);
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;
	gl_Position =  projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = (textureCoords/numberOfRows) + offset;
	
	vec3 actualNormal = normals;
	if (useFakeLighting > 0.5) {
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	for(int i=0;i<4;i++){
		toLightVector[i] = lightPos[i] - worldPosition.xyz;
		}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility,0.0,1.0);
	
}